
BlinkLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d00  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000923  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069d  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ca  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  88:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Init>:
#ifndef I2C_GYRO_CPP
#define I2C_GYRO_CPP
#include "I2C_GYRO.h"

void I2C_Init(){
	TWCR &= ~(1<<TWIE);
  90:	ec eb       	ldi	r30, 0xBC	; 188
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
	TWBR = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR &= ~(1<<TWPS1) | (1<<TWPS0);
  a0:	e9 eb       	ldi	r30, 0xB9	; 185
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <I2C_Start>:
}

void I2C_Start(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  ac:	84 ea       	ldi	r24, 0xA4	; 164
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while ( !( TWCR & ( 1<<TWINT ) ) );
  b2:	ec eb       	ldi	r30, 0xBC	; 188
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	ec f7       	brge	.-6      	; 0xb6 <I2C_Start+0xa>
}
  bc:	08 95       	ret

000000be <I2C_Stop>:
void I2C_Stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  be:	84 e9       	ldi	r24, 0x94	; 148
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWSTO)));
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	84 ff       	sbrs	r24, 4
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <I2C_Stop+0xa>
}
  ce:	08 95       	ret

000000d0 <I2C_Write>:

void I2C_Write(uint8_t byte){
	TWDR = byte;
  d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
  da:	ec eb       	ldi	r30, 0xBC	; 188
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <I2C_Write+0xe>
}
  e4:	08 95       	ret

000000e6 <I2C_Read>:

uint8_t I2C_Read(uint8_t ack){ //ack = 1: MAK; ack = 0:NMAK;
    TWCR = (1<<TWINT)|(1<<TWEN)|(ack << TWEA);
  e6:	20 e4       	ldi	r18, 0x40	; 64
  e8:	82 9f       	mul	r24, r18
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	84 68       	ori	r24, 0x84	; 132
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while(!(TWCR&(1<<TWINT)));
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <I2C_Read+0x12>
	return TWDR;
  fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 102:	08 95       	ret

00000104 <I2C_Read_Single_Byte>:

uint8_t I2C_Read_Single_Byte(uint8_t reg , uint8_t addr){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	d8 2f       	mov	r29, r24
 10a:	c6 2f       	mov	r28, r22
	uint8_t data;
	
	I2C_Start();	
 10c:	0e 94 56 00 	call	0xac	; 0xac <I2C_Start>
	I2C_Write(addr); //SDA+W
 110:	8c 2f       	mov	r24, r28
 112:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	I2C_Write(reg);	
 116:	8d 2f       	mov	r24, r29
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	I2C_Start();
 11c:	0e 94 56 00 	call	0xac	; 0xac <I2C_Start>
	I2C_Write(addr+1); // SDA+R 
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	8c 0f       	add	r24, r28
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	data = I2C_Read(0); 
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 73 00 	call	0xe6	; 0xe6 <I2C_Read>
 12e:	c8 2f       	mov	r28, r24
	I2C_Stop();
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_Stop>
	
	return data;
}
 134:	8c 2f       	mov	r24, r28
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <I2C_Write_Single_Byte>:

void I2C_Write_Single_Byte (uint8_t reg, uint8_t value, uint8_t addr){
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	d8 2f       	mov	r29, r24
 144:	c6 2f       	mov	r28, r22
 146:	14 2f       	mov	r17, r20
	I2C_Start();
 148:	0e 94 56 00 	call	0xac	; 0xac <I2C_Start>
	I2C_Write(addr);
 14c:	81 2f       	mov	r24, r17
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	I2C_Write(reg);
 152:	8d 2f       	mov	r24, r29
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	I2C_Write(value);
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 68 00 	call	0xd0	; 0xd0 <I2C_Write>
	I2C_Stop();
 15e:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_Stop>
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	08 95       	ret

0000016a <I2C_Read_Y>:

void I2C_Read_Y(){
 16a:	cf 93       	push	r28
	uint8_t Y_HIGH, Y_LOW;
	Y_HIGH = I2C_Read_Single_Byte(OUT_Y_H, GYRO_ADDRESS);
 16c:	66 ed       	ldi	r22, 0xD6	; 214
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	0e 94 82 00 	call	0x104	; 0x104 <I2C_Read_Single_Byte>
 174:	c8 2f       	mov	r28, r24
	Y_LOW  = I2C_Read_Single_Byte(OUT_Y_L, GYRO_ADDRESS);
 176:	66 ed       	ldi	r22, 0xD6	; 214
 178:	8a e2       	ldi	r24, 0x2A	; 42
 17a:	0e 94 82 00 	call	0x104	; 0x104 <I2C_Read_Single_Byte>
	accY = (Y_HIGH << 8) | Y_LOW;
 17e:	2c 2f       	mov	r18, r28
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	32 2f       	mov	r19, r18
 184:	22 27       	eor	r18, r18
 186:	28 2b       	or	r18, r24
 188:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <accY+0x1>
 18c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <accY>
}
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
		TCCR1B |= (1 << WGM12);
		// Set CS11 bit for prescaling by 8
		TCCR1B |= (1 << CS11);
		// enable timer compare interrupt
		TIMSK1 |= (1 << OCIE1A);
		sei();          // enable global interrupts
 194:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Init>
 198:	46 ed       	ldi	r20, 0xD6	; 214
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_Write_Single_Byte>
 1a2:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Read_Y>
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	80 66       	ori	r24, 0x60	; 96
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	17 bc       	out	0x27, r1	; 39
 1ae:	18 bc       	out	0x28, r1	; 40
 1b0:	84 b5       	in	r24, 0x24	; 36
 1b2:	80 6a       	ori	r24, 0xA0	; 160
 1b4:	84 bd       	out	0x24, r24	; 36
 1b6:	84 b5       	in	r24, 0x24	; 36
 1b8:	83 60       	ori	r24, 0x03	; 3
 1ba:	84 bd       	out	0x24, r24	; 36
 1bc:	85 b5       	in	r24, 0x25	; 37
 1be:	25 b5       	in	r18, 0x25	; 37
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	88 7f       	andi	r24, 0xF8	; 248
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	82 2b       	or	r24, r18
 1c8:	85 bd       	out	0x25, r24	; 37
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	85 60       	ori	r24, 0x05	; 5
 1ce:	84 b9       	out	0x04, r24	; 4
 1d0:	57 9a       	sbi	0x0a, 7	; 10
 1d2:	2a 9a       	sbi	0x05, 2	; 5
 1d4:	b1 2c       	mov	r11, r1
 1d6:	00 e0       	ldi	r16, 0x00	; 0
 1d8:	10 e5       	ldi	r17, 0x50	; 80
 1da:	c4 e6       	ldi	r28, 0x64	; 100
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	0f 2e       	mov	r0, r31
 1e0:	f4 e6       	ldi	r31, 0x64	; 100
 1e2:	cf 2e       	mov	r12, r31
 1e4:	d1 2c       	mov	r13, r1
 1e6:	e1 2c       	mov	r14, r1
 1e8:	f1 2c       	mov	r15, r1
 1ea:	f0 2d       	mov	r31, r0
 1ec:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Read_Y>
 1f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <accY>
 1f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <accY+0x1>
 1f8:	99 23       	and	r25, r25
 1fa:	14 f4       	brge	.+4      	; 0x200 <main+0x6c>
 1fc:	81 58       	subi	r24, 0x81	; 129
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	88 0f       	add	r24, r24
 202:	89 2f       	mov	r24, r25
 204:	88 1f       	adc	r24, r24
 206:	99 0b       	sbc	r25, r25
 208:	9c 01       	movw	r18, r24
 20a:	2e 5f       	subi	r18, 0xFE	; 254
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	03 96       	adiw	r24, 0x03	; 3
 210:	03 97       	sbiw	r24, 0x03	; 3
 212:	10 f4       	brcc	.+4      	; 0x218 <main+0x84>
 214:	2b 2d       	mov	r18, r11
 216:	30 2f       	mov	r19, r16
 218:	12 9f       	mul	r17, r18
 21a:	c0 01       	movw	r24, r0
 21c:	13 9f       	mul	r17, r19
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	be 01       	movw	r22, r28
 224:	0e 94 6f 01 	call	0x2de	; 0x2de <__divmodhi4>
 228:	ab 01       	movw	r20, r22
 22a:	77 0f       	add	r23, r23
 22c:	66 0b       	sbc	r22, r22
 22e:	77 0b       	sbc	r23, r23
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 238:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 23c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 240:	9a 01       	movw	r18, r20
 242:	ab 01       	movw	r20, r22
 244:	28 0f       	add	r18, r24
 246:	39 1f       	adc	r19, r25
 248:	4a 1f       	adc	r20, r26
 24a:	5b 1f       	adc	r21, r27
 24c:	a3 e6       	ldi	r26, 0x63	; 99
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	0e 94 a2 01 	call	0x344	; 0x344 <__muluhisi3>
 254:	a7 01       	movw	r20, r14
 256:	96 01       	movw	r18, r12
 258:	0e 94 83 01 	call	0x306	; 0x306 <__divmodsi4>
 25c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 260:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 264:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <_edata+0x2>
 268:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <_edata+0x3>
 26c:	12 16       	cp	r1, r18
 26e:	13 06       	cpc	r1, r19
 270:	14 06       	cpc	r1, r20
 272:	15 06       	cpc	r1, r21
 274:	54 f4       	brge	.+20     	; 0x28a <main+0xf6>
 276:	c9 01       	movw	r24, r18
 278:	99 23       	and	r25, r25
 27a:	24 f4       	brge	.+8      	; 0x284 <main+0xf0>
 27c:	88 27       	eor	r24, r24
 27e:	99 27       	eor	r25, r25
 280:	82 1b       	sub	r24, r18
 282:	93 0b       	sbc	r25, r19
 284:	0e 94 65 01 	call	0x2ca	; 0x2ca <moveBackward>
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <main+0x114>
 28a:	55 23       	and	r21, r21
 28c:	54 f4       	brge	.+20     	; 0x2a2 <main+0x10e>
 28e:	c9 01       	movw	r24, r18
 290:	99 23       	and	r25, r25
 292:	24 f4       	brge	.+8      	; 0x29c <main+0x108>
 294:	88 27       	eor	r24, r24
 296:	99 27       	eor	r25, r25
 298:	82 1b       	sub	r24, r18
 29a:	93 0b       	sbc	r25, r19
 29c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <moveForward>
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <main+0x114>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <moveForward>
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	97 e2       	ldi	r25, 0x27	; 39
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x118>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x11e>
 2b2:	00 00       	nop
 2b4:	9b cf       	rjmp	.-202    	; 0x1ec <main+0x58>

000002b6 <__vector_11>:
}
	
ISR(TIMER1_COMPA_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1

}
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <moveBackward>:
#ifndef MOTOR_DRIVER_C
#define MOTOR_DRIVER_C
#include "MOTOR_DRIVER.h"

void moveBackward(uint8_t duty){
	MOTOR_RIGHT_BACKWARD;
 2ca:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR_LEFT_FORWARD;
 2cc:	28 9a       	sbi	0x05, 0	; 5
	OCR0A = duty;				// set duty cycle max values is 256 (100%)
 2ce:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
 2d0:	88 bd       	out	0x28, r24	; 40
 2d2:	08 95       	ret

000002d4 <moveForward>:
}

void moveForward(uint8_t duty){
	MOTOR_RIGHT_FORWARD;
 2d4:	5f 9a       	sbi	0x0b, 7	; 11
	MOTOR_LEFT_BACKWARD;
 2d6:	28 98       	cbi	0x05, 0	; 5
	OCR0A = duty;				// set duty cycle max values is 256 (100%)
 2d8:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
 2da:	88 bd       	out	0x28, r24	; 40
 2dc:	08 95       	ret

000002de <__divmodhi4>:
 2de:	97 fb       	bst	r25, 7
 2e0:	07 2e       	mov	r0, r23
 2e2:	16 f4       	brtc	.+4      	; 0x2e8 <__divmodhi4+0xa>
 2e4:	00 94       	com	r0
 2e6:	07 d0       	rcall	.+14     	; 0x2f6 <__divmodhi4_neg1>
 2e8:	77 fd       	sbrc	r23, 7
 2ea:	09 d0       	rcall	.+18     	; 0x2fe <__divmodhi4_neg2>
 2ec:	0e 94 ad 01 	call	0x35a	; 0x35a <__udivmodhi4>
 2f0:	07 fc       	sbrc	r0, 7
 2f2:	05 d0       	rcall	.+10     	; 0x2fe <__divmodhi4_neg2>
 2f4:	3e f4       	brtc	.+14     	; 0x304 <__divmodhi4_exit>

000002f6 <__divmodhi4_neg1>:
 2f6:	90 95       	com	r25
 2f8:	81 95       	neg	r24
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__divmodhi4_neg2>:
 2fe:	70 95       	com	r23
 300:	61 95       	neg	r22
 302:	7f 4f       	sbci	r23, 0xFF	; 255

00000304 <__divmodhi4_exit>:
 304:	08 95       	ret

00000306 <__divmodsi4>:
 306:	05 2e       	mov	r0, r21
 308:	97 fb       	bst	r25, 7
 30a:	1e f4       	brtc	.+6      	; 0x312 <__divmodsi4+0xc>
 30c:	00 94       	com	r0
 30e:	0e 94 9a 01 	call	0x334	; 0x334 <__negsi2>
 312:	57 fd       	sbrc	r21, 7
 314:	07 d0       	rcall	.+14     	; 0x324 <__divmodsi4_neg2>
 316:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodsi4>
 31a:	07 fc       	sbrc	r0, 7
 31c:	03 d0       	rcall	.+6      	; 0x324 <__divmodsi4_neg2>
 31e:	4e f4       	brtc	.+18     	; 0x332 <__divmodsi4_exit>
 320:	0c 94 9a 01 	jmp	0x334	; 0x334 <__negsi2>

00000324 <__divmodsi4_neg2>:
 324:	50 95       	com	r21
 326:	40 95       	com	r20
 328:	30 95       	com	r19
 32a:	21 95       	neg	r18
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	4f 4f       	sbci	r20, 0xFF	; 255
 330:	5f 4f       	sbci	r21, 0xFF	; 255

00000332 <__divmodsi4_exit>:
 332:	08 95       	ret

00000334 <__negsi2>:
 334:	90 95       	com	r25
 336:	80 95       	com	r24
 338:	70 95       	com	r23
 33a:	61 95       	neg	r22
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	08 95       	ret

00000344 <__muluhisi3>:
 344:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__umulhisi3>
 348:	a5 9f       	mul	r26, r21
 34a:	90 0d       	add	r25, r0
 34c:	b4 9f       	mul	r27, r20
 34e:	90 0d       	add	r25, r0
 350:	a4 9f       	mul	r26, r20
 352:	80 0d       	add	r24, r0
 354:	91 1d       	adc	r25, r1
 356:	11 24       	eor	r1, r1
 358:	08 95       	ret

0000035a <__udivmodhi4>:
 35a:	aa 1b       	sub	r26, r26
 35c:	bb 1b       	sub	r27, r27
 35e:	51 e1       	ldi	r21, 0x11	; 17
 360:	07 c0       	rjmp	.+14     	; 0x370 <__udivmodhi4_ep>

00000362 <__udivmodhi4_loop>:
 362:	aa 1f       	adc	r26, r26
 364:	bb 1f       	adc	r27, r27
 366:	a6 17       	cp	r26, r22
 368:	b7 07       	cpc	r27, r23
 36a:	10 f0       	brcs	.+4      	; 0x370 <__udivmodhi4_ep>
 36c:	a6 1b       	sub	r26, r22
 36e:	b7 0b       	sbc	r27, r23

00000370 <__udivmodhi4_ep>:
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	5a 95       	dec	r21
 376:	a9 f7       	brne	.-22     	; 0x362 <__udivmodhi4_loop>
 378:	80 95       	com	r24
 37a:	90 95       	com	r25
 37c:	bc 01       	movw	r22, r24
 37e:	cd 01       	movw	r24, r26
 380:	08 95       	ret

00000382 <__udivmodsi4>:
 382:	a1 e2       	ldi	r26, 0x21	; 33
 384:	1a 2e       	mov	r1, r26
 386:	aa 1b       	sub	r26, r26
 388:	bb 1b       	sub	r27, r27
 38a:	fd 01       	movw	r30, r26
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <__udivmodsi4_ep>

0000038e <__udivmodsi4_loop>:
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	ee 1f       	adc	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	a2 17       	cp	r26, r18
 398:	b3 07       	cpc	r27, r19
 39a:	e4 07       	cpc	r30, r20
 39c:	f5 07       	cpc	r31, r21
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__udivmodsi4_ep>
 3a0:	a2 1b       	sub	r26, r18
 3a2:	b3 0b       	sbc	r27, r19
 3a4:	e4 0b       	sbc	r30, r20
 3a6:	f5 0b       	sbc	r31, r21

000003a8 <__udivmodsi4_ep>:
 3a8:	66 1f       	adc	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	1a 94       	dec	r1
 3b2:	69 f7       	brne	.-38     	; 0x38e <__udivmodsi4_loop>
 3b4:	60 95       	com	r22
 3b6:	70 95       	com	r23
 3b8:	80 95       	com	r24
 3ba:	90 95       	com	r25
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	bd 01       	movw	r22, r26
 3c2:	cf 01       	movw	r24, r30
 3c4:	08 95       	ret

000003c6 <__umulhisi3>:
 3c6:	a2 9f       	mul	r26, r18
 3c8:	b0 01       	movw	r22, r0
 3ca:	b3 9f       	mul	r27, r19
 3cc:	c0 01       	movw	r24, r0
 3ce:	a3 9f       	mul	r26, r19
 3d0:	70 0d       	add	r23, r0
 3d2:	81 1d       	adc	r24, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	91 1d       	adc	r25, r1
 3d8:	b2 9f       	mul	r27, r18
 3da:	70 0d       	add	r23, r0
 3dc:	81 1d       	adc	r24, r1
 3de:	11 24       	eor	r1, r1
 3e0:	91 1d       	adc	r25, r1
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
