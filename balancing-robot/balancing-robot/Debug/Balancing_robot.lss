
Balancing_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800100  00800100  00000ac8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001045  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076f  00000000  00000000  000025a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000546  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000433  00000000  00000000  00003472  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000038a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  b6:	0c 94 28 05 	jmp	0xa50	; 0xa50 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <I2C_Init>:
void I2C_Read_Gyro_X(){
	uint8_t high, low;
	high = I2C_Read_Single_Byte(OUTX_H_G, GYRO_ADDRESS);
	low = I2C_Read_Single_Byte(OUTX_L_G, GYRO_ADDRESS);
	GyroX = (high << 8) | low;
}
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	80 83       	st	Z, r24
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <I2C_Start>:
  da:	84 ea       	ldi	r24, 0xA4	; 164
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e0:	ec eb       	ldi	r30, 0xBC	; 188
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <I2C_Start+0xa>
  ea:	08 95       	ret

000000ec <I2C_Stop>:
  ec:	84 e9       	ldi	r24, 0x94	; 148
  ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 ff       	sbrs	r24, 4
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <I2C_Stop+0xa>
  fc:	08 95       	ret

000000fe <I2C_Write>:
  fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 102:	84 e8       	ldi	r24, 0x84	; 132
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <I2C_Write+0xe>
 112:	08 95       	ret

00000114 <I2C_Read>:
 114:	20 e4       	ldi	r18, 0x40	; 64
 116:	82 9f       	mul	r24, r18
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	84 68       	ori	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <I2C_Read+0x12>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <I2C_Read_Single_Byte>:
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	d8 2f       	mov	r29, r24
 138:	c6 2f       	mov	r28, r22
 13a:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Start>
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 144:	8d 2f       	mov	r24, r29
 146:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 14a:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Start>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8c 0f       	add	r24, r28
 152:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Read>
 15c:	c8 2f       	mov	r28, r24
 15e:	0e 94 76 00 	call	0xec	; 0xec <I2C_Stop>
 162:	8c 2f       	mov	r24, r28
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_Write_Single_Byte>:
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	d8 2f       	mov	r29, r24
 172:	c6 2f       	mov	r28, r22
 174:	14 2f       	mov	r17, r20
 176:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Start>
 17a:	81 2f       	mov	r24, r17
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Write>
 18c:	0e 94 76 00 	call	0xec	; 0xec <I2C_Stop>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	08 95       	ret

00000198 <I2C_Read_Acc_X>:
 198:	cf 93       	push	r28
 19a:	66 ed       	ldi	r22, 0xD6	; 214
 19c:	89 e2       	ldi	r24, 0x29	; 41
 19e:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
 1a2:	c8 2f       	mov	r28, r24
 1a4:	66 ed       	ldi	r22, 0xD6	; 214
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
 1ac:	2c 2f       	mov	r18, r28
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	32 2f       	mov	r19, r18
 1b2:	22 27       	eor	r18, r18
 1b4:	28 2b       	or	r18, r24
 1b6:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <AccX+0x1>
 1ba:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <AccX>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <I2C_Read_Acc_Z>:
 1c2:	cf 93       	push	r28
 1c4:	66 ed       	ldi	r22, 0xD6	; 214
 1c6:	8d e2       	ldi	r24, 0x2D	; 45
 1c8:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
 1cc:	c8 2f       	mov	r28, r24
 1ce:	66 ed       	ldi	r22, 0xD6	; 214
 1d0:	8c e2       	ldi	r24, 0x2C	; 44
 1d2:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
 1d6:	2c 2f       	mov	r18, r28
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	32 2f       	mov	r19, r18
 1dc:	22 27       	eor	r18, r18
 1de:	28 2b       	or	r18, r24
 1e0:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <AccZ+0x1>
 1e4:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <AccZ>
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <I2C_Read_Gyro_Y>:

void I2C_Read_Gyro_Y(){
 1ec:	cf 93       	push	r28
	uint8_t high, low;
	high = I2C_Read_Single_Byte(OUTY_H_G, GYRO_ADDRESS);
 1ee:	66 ed       	ldi	r22, 0xD6	; 214
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
 1f6:	c8 2f       	mov	r28, r24
	low = I2C_Read_Single_Byte(OUTY_L_G, GYRO_ADDRESS);
 1f8:	66 ed       	ldi	r22, 0xD6	; 214
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Single_Byte>
	GyroY = (high << 8) | low;
 200:	2c 2f       	mov	r18, r28
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	32 2f       	mov	r19, r18
 206:	22 27       	eor	r18, r18
 208:	28 2b       	or	r18, r24
 20a:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <GyroY+0x1>
 20e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <GyroY>
}
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <accAndGyroInit>:
int16_t motorPower = 0;
int16_t rangeConstraint(int16_t val, int16_t min, int16_t max){
	if (val > max ) return max;
	if( val < min) return min;
	return val;
}
 216:	46 ed       	ldi	r20, 0xD6	; 214
 218:	60 e6       	ldi	r22, 0x60	; 96
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Write_Single_Byte>
 220:	46 ed       	ldi	r20, 0xD6	; 214
 222:	68 e3       	ldi	r22, 0x38	; 56
 224:	88 e1       	ldi	r24, 0x18	; 24
 226:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Write_Single_Byte>
 22a:	46 ed       	ldi	r20, 0xD6	; 214
 22c:	68 e3       	ldi	r22, 0x38	; 56
 22e:	89 e1       	ldi	r24, 0x19	; 25
 230:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Write_Single_Byte>
 234:	46 ed       	ldi	r20, 0xD6	; 214
 236:	60 e6       	ldi	r22, 0x60	; 96
 238:	81 e1       	ldi	r24, 0x11	; 17
 23a:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_Write_Single_Byte>
 23e:	08 95       	ret

00000240 <calcAngle>:

void calcAngle(){
 240:	4f 92       	push	r4
 242:	5f 92       	push	r5
 244:	6f 92       	push	r6
 246:	7f 92       	push	r7
 248:	8f 92       	push	r8
 24a:	9f 92       	push	r9
 24c:	af 92       	push	r10
 24e:	bf 92       	push	r11
 250:	cf 92       	push	r12
 252:	df 92       	push	r13
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
	I2C_Read_Acc_X();
 258:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_Read_Acc_X>
	I2C_Read_Acc_Z();
 25c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Read_Acc_Z>
	I2C_Read_Gyro_Y();
 260:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Read_Gyro_Y>
	
	accAngle = atan2f(AccZ,AccX) - M_PI_2;
 264:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <AccX>
 268:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <AccX+0x1>
 26c:	07 2e       	mov	r0, r23
 26e:	00 0c       	add	r0, r0
 270:	88 0b       	sbc	r24, r24
 272:	99 0b       	sbc	r25, r25
 274:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatsisf>
 278:	6b 01       	movw	r12, r22
 27a:	7c 01       	movw	r14, r24
 27c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <AccZ>
 280:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <AccZ+0x1>
 284:	07 2e       	mov	r0, r23
 286:	00 0c       	add	r0, r0
 288:	88 0b       	sbc	r24, r24
 28a:	99 0b       	sbc	r25, r25
 28c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatsisf>
 290:	a7 01       	movw	r20, r14
 292:	96 01       	movw	r18, r12
 294:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <atan2>
	accAngle *= 180.0f/M_PI;
 298:	2b ed       	ldi	r18, 0xDB	; 219
 29a:	3f e0       	ldi	r19, 0x0F	; 15
 29c:	49 ec       	ldi	r20, 0xC9	; 201
 29e:	5f e3       	ldi	r21, 0x3F	; 63
 2a0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__subsf3>
 2a4:	20 ee       	ldi	r18, 0xE0	; 224
 2a6:	3e e2       	ldi	r19, 0x2E	; 46
 2a8:	45 e6       	ldi	r20, 0x65	; 101
 2aa:	52 e4       	ldi	r21, 0x42	; 66
 2ac:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 2b0:	6b 01       	movw	r12, r22
 2b2:	7c 01       	movw	r14, r24
 2b4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <accAngle>
 2b8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <accAngle+0x1>
 2bc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <accAngle+0x2>
 2c0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <accAngle+0x3>
	
	gyroAngle = GyroY/128;
	gyroAngle *= DT;
 2c4:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <GyroY>
 2c8:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <GyroY+0x1>
 2cc:	77 23       	and	r23, r23
 2ce:	14 f4       	brge	.+4      	; 0x2d4 <calcAngle+0x94>
 2d0:	61 58       	subi	r22, 0x81	; 129
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	66 0f       	add	r22, r22
 2d6:	67 2f       	mov	r22, r23
 2d8:	66 1f       	adc	r22, r22
 2da:	77 0b       	sbc	r23, r23
 2dc:	07 2e       	mov	r0, r23
 2de:	00 0c       	add	r0, r0
 2e0:	88 0b       	sbc	r24, r24
 2e2:	99 0b       	sbc	r25, r25
 2e4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatsisf>
 2e8:	2d ec       	ldi	r18, 0xCD	; 205
 2ea:	3c ec       	ldi	r19, 0xCC	; 204
 2ec:	4c e4       	ldi	r20, 0x4C	; 76
 2ee:	5d e3       	ldi	r21, 0x3D	; 61
 2f0:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 2f4:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <gyroAngle>
 2f8:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <gyroAngle+0x1>
 2fc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <gyroAngle+0x2>
 300:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <gyroAngle+0x3>
	
	currentAngle = 0.9934*(previousAngle + gyroAngle) + 0.0066*(accAngle);
 304:	80 90 0e 01 	lds	r8, 0x010E	; 0x80010e <previousAngle>
 308:	90 90 0f 01 	lds	r9, 0x010F	; 0x80010f <previousAngle+0x1>
 30c:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <previousAngle+0x2>
 310:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <previousAngle+0x3>
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__addsf3>
 31c:	26 e7       	ldi	r18, 0x76	; 118
 31e:	3f e4       	ldi	r19, 0x4F	; 79
 320:	4e e7       	ldi	r20, 0x7E	; 126
 322:	5f e3       	ldi	r21, 0x3F	; 63
 324:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 328:	2b 01       	movw	r4, r22
 32a:	3c 01       	movw	r6, r24
 32c:	20 ed       	ldi	r18, 0xD0	; 208
 32e:	34 e4       	ldi	r19, 0x44	; 68
 330:	48 ed       	ldi	r20, 0xD8	; 216
 332:	5b e3       	ldi	r21, 0x3B	; 59
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	c3 01       	movw	r24, r6
 342:	b2 01       	movw	r22, r4
 344:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__addsf3>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
 34c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <currentAngle>
 350:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <currentAngle+0x1>
 354:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <currentAngle+0x2>
 358:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <currentAngle+0x3>
	error = currentAngle - targetAngle;
 35c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <error>
 360:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <error+0x1>
 364:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <error+0x2>
 368:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <error+0x3>
	errorSum = errorSum + error;
	errorSum = rangeConstraint(errorSum, -300,300);
 36c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <errorSum>
 370:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <errorSum+0x1>
 374:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <errorSum+0x2>
 378:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <errorSum+0x3>
 37c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__addsf3>
 380:	0e 94 c4 03 	call	0x788	; 0x788 <__fixsfsi>
 384:	64 3d       	cpi	r22, 0xD4	; 212
 386:	8e ef       	ldi	r24, 0xFE	; 254
 388:	78 07       	cpc	r23, r24
 38a:	14 f4       	brge	.+4      	; 0x390 <calcAngle+0x150>
 38c:	64 ed       	ldi	r22, 0xD4	; 212
 38e:	7e ef       	ldi	r23, 0xFE	; 254
 390:	6d 32       	cpi	r22, 0x2D	; 45
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	78 07       	cpc	r23, r24
 396:	14 f0       	brlt	.+4      	; 0x39c <calcAngle+0x15c>
 398:	6c e2       	ldi	r22, 0x2C	; 44
 39a:	71 e0       	ldi	r23, 0x01	; 1
 39c:	07 2e       	mov	r0, r23
 39e:	00 0c       	add	r0, r0
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__floatsisf>
 3a8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <errorSum>
 3ac:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <errorSum+0x1>
 3b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <errorSum+0x2>
 3b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <errorSum+0x3>
	
	motorPower = Kp*(error) + Ki*(errorSum)*DT - Kd*(currentAngle-previousAngle)/DT;
	motorPower = rangeConstraint(motorPower, -255,255);
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 3c2:	2d ec       	ldi	r18, 0xCD	; 205
 3c4:	3c ec       	ldi	r19, 0xCC	; 204
 3c6:	4c e4       	ldi	r20, 0x4C	; 76
 3c8:	5d e3       	ldi	r21, 0x3D	; 61
 3ca:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 3ce:	2b 01       	movw	r4, r22
 3d0:	3c 01       	movw	r6, r24
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	48 ec       	ldi	r20, 0xC8	; 200
 3d8:	52 e4       	ldi	r21, 0x42	; 66
 3da:	c7 01       	movw	r24, r14
 3dc:	b6 01       	movw	r22, r12
 3de:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 3e2:	9b 01       	movw	r18, r22
 3e4:	ac 01       	movw	r20, r24
 3e6:	c3 01       	movw	r24, r6
 3e8:	b2 01       	movw	r22, r4
 3ea:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__addsf3>
 3ee:	2b 01       	movw	r4, r22
 3f0:	3c 01       	movw	r6, r24
 3f2:	a5 01       	movw	r20, r10
 3f4:	94 01       	movw	r18, r8
 3f6:	c7 01       	movw	r24, r14
 3f8:	b6 01       	movw	r22, r12
 3fa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__subsf3>
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	a9 01       	movw	r20, r18
 404:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 408:	2d ec       	ldi	r18, 0xCD	; 205
 40a:	3c ec       	ldi	r19, 0xCC	; 204
 40c:	4c e4       	ldi	r20, 0x4C	; 76
 40e:	5d e3       	ldi	r21, 0x3D	; 61
 410:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divsf3>
 414:	9b 01       	movw	r18, r22
 416:	ac 01       	movw	r20, r24
 418:	c3 01       	movw	r24, r6
 41a:	b2 01       	movw	r22, r4
 41c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__subsf3>
 420:	0e 94 c4 03 	call	0x788	; 0x788 <__fixsfsi>
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	78 07       	cpc	r23, r24
 42a:	14 f4       	brge	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	7f ef       	ldi	r23, 0xFF	; 255
 430:	6f 3f       	cpi	r22, 0xFF	; 255
 432:	71 05       	cpc	r23, r1
 434:	19 f0       	breq	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 436:	14 f0       	brlt	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	6f ef       	ldi	r22, 0xFF	; 255
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 440:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	previousAngle = currentAngle;
 444:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <previousAngle>
 448:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <previousAngle+0x1>
 44c:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <previousAngle+0x2>
 450:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <previousAngle+0x3>
}
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	bf 90       	pop	r11
 45e:	af 90       	pop	r10
 460:	9f 90       	pop	r9
 462:	8f 90       	pop	r8
 464:	7f 90       	pop	r7
 466:	6f 90       	pop	r6
 468:	5f 90       	pop	r5
 46a:	4f 90       	pop	r4
 46c:	08 95       	ret

0000046e <main>:
int main(void)
{
	void zeroTable(); // set 0 to all elements of table 'tab'
	
	/* ACC & GYRO INITIALIZATION*/
	I2C_Init();
 46e:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_Init>
	accAndGyroInit();
 472:	0e 94 0b 01 	call	0x216	; 0x216 <accAndGyroInit>


	//**** MOTOR CONTROL ****//
	//set up Fast PWM Mode on pin PD6
	DDRD |= (1 << DDD6) | ( 1 << DDD5);	// set PD6 as output
 476:	8a b1       	in	r24, 0x0a	; 10
 478:	80 66       	ori	r24, 0x60	; 96
 47a:	8a b9       	out	0x0a, r24	; 10
	OCR0A = 0;				// set duty cycle max values is 256 (100%)
 47c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 47e:	18 bc       	out	0x28, r1	; 40
	TCCR0A |= ((1 << COM0A1) | (1 << COM0B1)); //set OC0A and OC0B
 480:	84 b5       	in	r24, 0x24	; 36
 482:	80 6a       	ori	r24, 0xA0	; 160
 484:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // set fast PWM Mode
 486:	84 b5       	in	r24, 0x24	; 36
 488:	83 60       	ori	r24, 0x03	; 3
 48a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (TCCR0B & ~((1 << CS01) | (1 << CS02)))| (1<<CS00); // set prescaler
 48c:	85 b5       	in	r24, 0x25	; 37
 48e:	25 b5       	in	r18, 0x25	; 37
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	88 7f       	andi	r24, 0xF8	; 248
 494:	81 60       	ori	r24, 0x01	; 1
 496:	82 2b       	or	r24, r18
 498:	85 bd       	out	0x25, r24	; 37

	DDRB |= MOTOR_LEFT  | MOTOR_MODE; // set as output
 49a:	84 b1       	in	r24, 0x04	; 4
 49c:	85 60       	ori	r24, 0x05	; 5
 49e:	84 b9       	out	0x04, r24	; 4
	DDRD |= MOTOR_RIGHT; //set as output
 4a0:	57 9a       	sbi	0x0a, 7	; 10
	MOTOR_MODE_EN;
 4a2:	2a 9a       	sbi	0x05, 2	; 5
	while (1)
	{
		calcAngle();
 4a4:	0e 94 20 01 	call	0x240	; 0x240 <calcAngle>
		if(motorPower <0)
 4a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4b0:	99 23       	and	r25, r25
 4b2:	1c f4       	brge	.+6      	; 0x4ba <main+0x4c>
			moveForward(motorPower);
 4b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <moveForward>
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <main+0x50>
		else
			moveBackward(motorPower);
 4ba:	0e 94 69 02 	call	0x4d2	; 0x4d2 <moveBackward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	2f e7       	ldi	r18, 0x7F	; 127
 4c0:	88 e3       	ldi	r24, 0x38	; 56
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0x56>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x60>
 4ce:	00 00       	nop
 4d0:	e9 cf       	rjmp	.-46     	; 0x4a4 <main+0x36>

000004d2 <moveBackward>:
#ifndef MOTOR_DRIVER_C
#define MOTOR_DRIVER_C
#include "MOTOR_DRIVER.h"

void moveBackward(uint8_t duty){
	MOTOR_RIGHT_BACKWARD;
 4d2:	5f 98       	cbi	0x0b, 7	; 11
	MOTOR_LEFT_FORWARD;
 4d4:	28 9a       	sbi	0x05, 0	; 5
	OCR0A = duty;				// set duty cycle max values is 256 (100%)
 4d6:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
 4d8:	88 bd       	out	0x28, r24	; 40
 4da:	08 95       	ret

000004dc <moveForward>:
}

void moveForward(uint8_t duty){
	MOTOR_RIGHT_FORWARD;
 4dc:	5f 9a       	sbi	0x0b, 7	; 11
	MOTOR_LEFT_BACKWARD;
 4de:	28 98       	cbi	0x05, 0	; 5
	OCR0A = duty;				// set duty cycle max values is 256 (100%)
 4e0:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
 4e2:	88 bd       	out	0x28, r24	; 40
 4e4:	08 95       	ret

000004e6 <__subsf3>:
 4e6:	50 58       	subi	r21, 0x80	; 128

000004e8 <__addsf3>:
 4e8:	bb 27       	eor	r27, r27
 4ea:	aa 27       	eor	r26, r26
 4ec:	0e 94 8b 02 	call	0x516	; 0x516 <__addsf3x>
 4f0:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
 4f4:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
 4f8:	38 f0       	brcs	.+14     	; 0x508 <__addsf3+0x20>
 4fa:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
 4fe:	20 f0       	brcs	.+8      	; 0x508 <__addsf3+0x20>
 500:	39 f4       	brne	.+14     	; 0x510 <__addsf3+0x28>
 502:	9f 3f       	cpi	r25, 0xFF	; 255
 504:	19 f4       	brne	.+6      	; 0x50c <__addsf3+0x24>
 506:	26 f4       	brtc	.+8      	; 0x510 <__addsf3+0x28>
 508:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>
 50c:	0e f4       	brtc	.+2      	; 0x510 <__addsf3+0x28>
 50e:	e0 95       	com	r30
 510:	e7 fb       	bst	r30, 7
 512:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>

00000516 <__addsf3x>:
 516:	e9 2f       	mov	r30, r25
 518:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_split3>
 51c:	58 f3       	brcs	.-42     	; 0x4f4 <__addsf3+0xc>
 51e:	ba 17       	cp	r27, r26
 520:	62 07       	cpc	r22, r18
 522:	73 07       	cpc	r23, r19
 524:	84 07       	cpc	r24, r20
 526:	95 07       	cpc	r25, r21
 528:	20 f0       	brcs	.+8      	; 0x532 <__addsf3x+0x1c>
 52a:	79 f4       	brne	.+30     	; 0x54a <__addsf3x+0x34>
 52c:	a6 f5       	brtc	.+104    	; 0x596 <__addsf3x+0x80>
 52e:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_zero>
 532:	0e f4       	brtc	.+2      	; 0x536 <__addsf3x+0x20>
 534:	e0 95       	com	r30
 536:	0b 2e       	mov	r0, r27
 538:	ba 2f       	mov	r27, r26
 53a:	a0 2d       	mov	r26, r0
 53c:	0b 01       	movw	r0, r22
 53e:	b9 01       	movw	r22, r18
 540:	90 01       	movw	r18, r0
 542:	0c 01       	movw	r0, r24
 544:	ca 01       	movw	r24, r20
 546:	a0 01       	movw	r20, r0
 548:	11 24       	eor	r1, r1
 54a:	ff 27       	eor	r31, r31
 54c:	59 1b       	sub	r21, r25
 54e:	99 f0       	breq	.+38     	; 0x576 <__addsf3x+0x60>
 550:	59 3f       	cpi	r21, 0xF9	; 249
 552:	50 f4       	brcc	.+20     	; 0x568 <__addsf3x+0x52>
 554:	50 3e       	cpi	r21, 0xE0	; 224
 556:	68 f1       	brcs	.+90     	; 0x5b2 <__addsf3x+0x9c>
 558:	1a 16       	cp	r1, r26
 55a:	f0 40       	sbci	r31, 0x00	; 0
 55c:	a2 2f       	mov	r26, r18
 55e:	23 2f       	mov	r18, r19
 560:	34 2f       	mov	r19, r20
 562:	44 27       	eor	r20, r20
 564:	58 5f       	subi	r21, 0xF8	; 248
 566:	f3 cf       	rjmp	.-26     	; 0x54e <__addsf3x+0x38>
 568:	46 95       	lsr	r20
 56a:	37 95       	ror	r19
 56c:	27 95       	ror	r18
 56e:	a7 95       	ror	r26
 570:	f0 40       	sbci	r31, 0x00	; 0
 572:	53 95       	inc	r21
 574:	c9 f7       	brne	.-14     	; 0x568 <__addsf3x+0x52>
 576:	7e f4       	brtc	.+30     	; 0x596 <__addsf3x+0x80>
 578:	1f 16       	cp	r1, r31
 57a:	ba 0b       	sbc	r27, r26
 57c:	62 0b       	sbc	r22, r18
 57e:	73 0b       	sbc	r23, r19
 580:	84 0b       	sbc	r24, r20
 582:	ba f0       	brmi	.+46     	; 0x5b2 <__addsf3x+0x9c>
 584:	91 50       	subi	r25, 0x01	; 1
 586:	a1 f0       	breq	.+40     	; 0x5b0 <__addsf3x+0x9a>
 588:	ff 0f       	add	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	c2 f7       	brpl	.-16     	; 0x584 <__addsf3x+0x6e>
 594:	0e c0       	rjmp	.+28     	; 0x5b2 <__addsf3x+0x9c>
 596:	ba 0f       	add	r27, r26
 598:	62 1f       	adc	r22, r18
 59a:	73 1f       	adc	r23, r19
 59c:	84 1f       	adc	r24, r20
 59e:	48 f4       	brcc	.+18     	; 0x5b2 <__addsf3x+0x9c>
 5a0:	87 95       	ror	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b7 95       	ror	r27
 5a8:	f7 95       	ror	r31
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__addsf3x+0x9a>
 5ae:	b0 cf       	rjmp	.-160    	; 0x510 <__addsf3+0x28>
 5b0:	93 95       	inc	r25
 5b2:	88 0f       	add	r24, r24
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <__addsf3x+0xa2>
 5b6:	99 27       	eor	r25, r25
 5b8:	ee 0f       	add	r30, r30
 5ba:	97 95       	ror	r25
 5bc:	87 95       	ror	r24
 5be:	08 95       	ret
 5c0:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
 5c4:	60 f0       	brcs	.+24     	; 0x5de <__addsf3x+0xc8>
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	09 f4       	brne	.+2      	; 0x5ce <__addsf3x+0xb8>
 5cc:	9e ef       	ldi	r25, 0xFE	; 254
 5ce:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
 5d2:	28 f0       	brcs	.+10     	; 0x5de <__addsf3x+0xc8>
 5d4:	40 e8       	ldi	r20, 0x80	; 128
 5d6:	51 e0       	ldi	r21, 0x01	; 1
 5d8:	71 f4       	brne	.+28     	; 0x5f6 <atan2+0x10>
 5da:	5e ef       	ldi	r21, 0xFE	; 254
 5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <atan2+0x10>
 5de:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>
 5e2:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_zero>

000005e6 <atan2>:
 5e6:	e9 2f       	mov	r30, r25
 5e8:	e0 78       	andi	r30, 0x80	; 128
 5ea:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_split3>
 5ee:	40 f3       	brcs	.-48     	; 0x5c0 <__addsf3x+0xaa>
 5f0:	09 2e       	mov	r0, r25
 5f2:	05 2a       	or	r0, r21
 5f4:	b1 f3       	breq	.-20     	; 0x5e2 <__addsf3x+0xcc>
 5f6:	26 17       	cp	r18, r22
 5f8:	37 07       	cpc	r19, r23
 5fa:	48 07       	cpc	r20, r24
 5fc:	59 07       	cpc	r21, r25
 5fe:	38 f0       	brcs	.+14     	; 0x60e <atan2+0x28>
 600:	0e 2e       	mov	r0, r30
 602:	07 f8       	bld	r0, 7
 604:	e0 25       	eor	r30, r0
 606:	69 f0       	breq	.+26     	; 0x622 <atan2+0x3c>
 608:	e0 25       	eor	r30, r0
 60a:	e0 64       	ori	r30, 0x40	; 64
 60c:	0a c0       	rjmp	.+20     	; 0x622 <atan2+0x3c>
 60e:	ef 63       	ori	r30, 0x3F	; 63
 610:	07 f8       	bld	r0, 7
 612:	00 94       	com	r0
 614:	07 fa       	bst	r0, 7
 616:	db 01       	movw	r26, r22
 618:	b9 01       	movw	r22, r18
 61a:	9d 01       	movw	r18, r26
 61c:	dc 01       	movw	r26, r24
 61e:	ca 01       	movw	r24, r20
 620:	ad 01       	movw	r20, r26
 622:	ef 93       	push	r30
 624:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3_pse>
 628:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_round>
 62c:	0e 94 23 03 	call	0x646	; 0x646 <atan>
 630:	5f 91       	pop	r21
 632:	55 23       	and	r21, r21
 634:	39 f0       	breq	.+14     	; 0x644 <atan2+0x5e>
 636:	2b ed       	ldi	r18, 0xDB	; 219
 638:	3f e0       	ldi	r19, 0x0F	; 15
 63a:	49 e4       	ldi	r20, 0x49	; 73
 63c:	50 fd       	sbrc	r21, 0
 63e:	49 ec       	ldi	r20, 0xC9	; 201
 640:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__addsf3>
 644:	08 95       	ret

00000646 <atan>:
 646:	df 93       	push	r29
 648:	dd 27       	eor	r29, r29
 64a:	b9 2f       	mov	r27, r25
 64c:	bf 77       	andi	r27, 0x7F	; 127
 64e:	40 e8       	ldi	r20, 0x80	; 128
 650:	5f e3       	ldi	r21, 0x3F	; 63
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	48 07       	cpc	r20, r24
 658:	5b 07       	cpc	r21, r27
 65a:	18 f4       	brcc	.+6      	; 0x662 <atan+0x1c>
 65c:	d9 2f       	mov	r29, r25
 65e:	0e 94 af 04 	call	0x95e	; 0x95e <inverse>
 662:	9f 93       	push	r25
 664:	8f 93       	push	r24
 666:	7f 93       	push	r23
 668:	6f 93       	push	r22
 66a:	0e 94 24 05 	call	0xa48	; 0xa48 <square>
 66e:	e8 e6       	ldi	r30, 0x68	; 104
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	0e 94 40 04 	call	0x880	; 0x880 <__fp_powser>
 676:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_round>
 67a:	2f 91       	pop	r18
 67c:	3f 91       	pop	r19
 67e:	4f 91       	pop	r20
 680:	5f 91       	pop	r21
 682:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 686:	dd 23       	and	r29, r29
 688:	51 f0       	breq	.+20     	; 0x69e <atan+0x58>
 68a:	90 58       	subi	r25, 0x80	; 128
 68c:	a2 ea       	ldi	r26, 0xA2	; 162
 68e:	2a ed       	ldi	r18, 0xDA	; 218
 690:	3f e0       	ldi	r19, 0x0F	; 15
 692:	49 ec       	ldi	r20, 0xC9	; 201
 694:	5f e3       	ldi	r21, 0x3F	; 63
 696:	d0 78       	andi	r29, 0x80	; 128
 698:	5d 27       	eor	r21, r29
 69a:	0e 94 8b 02 	call	0x516	; 0x516 <__addsf3x>
 69e:	df 91       	pop	r29
 6a0:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>

000006a4 <__divsf3>:
 6a4:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divsf3x>
 6a8:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
 6ac:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
 6b0:	58 f0       	brcs	.+22     	; 0x6c8 <__divsf3+0x24>
 6b2:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
 6b6:	40 f0       	brcs	.+16     	; 0x6c8 <__divsf3+0x24>
 6b8:	29 f4       	brne	.+10     	; 0x6c4 <__divsf3+0x20>
 6ba:	5f 3f       	cpi	r21, 0xFF	; 255
 6bc:	29 f0       	breq	.+10     	; 0x6c8 <__divsf3+0x24>
 6be:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 6c2:	51 11       	cpse	r21, r1
 6c4:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_szero>
 6c8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>

000006cc <__divsf3x>:
 6cc:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_split3>
 6d0:	68 f3       	brcs	.-38     	; 0x6ac <__divsf3+0x8>

000006d2 <__divsf3_pse>:
 6d2:	99 23       	and	r25, r25
 6d4:	b1 f3       	breq	.-20     	; 0x6c2 <__divsf3+0x1e>
 6d6:	55 23       	and	r21, r21
 6d8:	91 f3       	breq	.-28     	; 0x6be <__divsf3+0x1a>
 6da:	95 1b       	sub	r25, r21
 6dc:	55 0b       	sbc	r21, r21
 6de:	bb 27       	eor	r27, r27
 6e0:	aa 27       	eor	r26, r26
 6e2:	62 17       	cp	r22, r18
 6e4:	73 07       	cpc	r23, r19
 6e6:	84 07       	cpc	r24, r20
 6e8:	38 f0       	brcs	.+14     	; 0x6f8 <__divsf3_pse+0x26>
 6ea:	9f 5f       	subi	r25, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	44 1f       	adc	r20, r20
 6f4:	aa 1f       	adc	r26, r26
 6f6:	a9 f3       	breq	.-22     	; 0x6e2 <__divsf3_pse+0x10>
 6f8:	35 d0       	rcall	.+106    	; 0x764 <__divsf3_pse+0x92>
 6fa:	0e 2e       	mov	r0, r30
 6fc:	3a f0       	brmi	.+14     	; 0x70c <__divsf3_pse+0x3a>
 6fe:	e0 e8       	ldi	r30, 0x80	; 128
 700:	32 d0       	rcall	.+100    	; 0x766 <__divsf3_pse+0x94>
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	e6 95       	lsr	r30
 708:	00 1c       	adc	r0, r0
 70a:	ca f7       	brpl	.-14     	; 0x6fe <__divsf3_pse+0x2c>
 70c:	2b d0       	rcall	.+86     	; 0x764 <__divsf3_pse+0x92>
 70e:	fe 2f       	mov	r31, r30
 710:	29 d0       	rcall	.+82     	; 0x764 <__divsf3_pse+0x92>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	bb 1f       	adc	r27, r27
 71a:	26 17       	cp	r18, r22
 71c:	37 07       	cpc	r19, r23
 71e:	48 07       	cpc	r20, r24
 720:	ab 07       	cpc	r26, r27
 722:	b0 e8       	ldi	r27, 0x80	; 128
 724:	09 f0       	breq	.+2      	; 0x728 <__divsf3_pse+0x56>
 726:	bb 0b       	sbc	r27, r27
 728:	80 2d       	mov	r24, r0
 72a:	bf 01       	movw	r22, r30
 72c:	ff 27       	eor	r31, r31
 72e:	93 58       	subi	r25, 0x83	; 131
 730:	5f 4f       	sbci	r21, 0xFF	; 255
 732:	3a f0       	brmi	.+14     	; 0x742 <__divsf3_pse+0x70>
 734:	9e 3f       	cpi	r25, 0xFE	; 254
 736:	51 05       	cpc	r21, r1
 738:	78 f0       	brcs	.+30     	; 0x758 <__divsf3_pse+0x86>
 73a:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 73e:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	e4 f3       	brlt	.-8      	; 0x73e <__divsf3_pse+0x6c>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	d4 f3       	brlt	.-12     	; 0x73e <__divsf3_pse+0x6c>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	c9 f7       	brne	.-14     	; 0x74a <__divsf3_pse+0x78>
 758:	88 0f       	add	r24, r24
 75a:	91 1d       	adc	r25, r1
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	97 f9       	bld	r25, 7
 762:	08 95       	ret
 764:	e1 e0       	ldi	r30, 0x01	; 1
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	bb 1f       	adc	r27, r27
 76e:	62 17       	cp	r22, r18
 770:	73 07       	cpc	r23, r19
 772:	84 07       	cpc	r24, r20
 774:	ba 07       	cpc	r27, r26
 776:	20 f0       	brcs	.+8      	; 0x780 <__divsf3_pse+0xae>
 778:	62 1b       	sub	r22, r18
 77a:	73 0b       	sbc	r23, r19
 77c:	84 0b       	sbc	r24, r20
 77e:	ba 0b       	sbc	r27, r26
 780:	ee 1f       	adc	r30, r30
 782:	88 f7       	brcc	.-30     	; 0x766 <__divsf3_pse+0x94>
 784:	e0 95       	com	r30
 786:	08 95       	ret

00000788 <__fixsfsi>:
 788:	0e 94 cb 03 	call	0x796	; 0x796 <__fixunssfsi>
 78c:	68 94       	set
 78e:	b1 11       	cpse	r27, r1
 790:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_szero>
 794:	08 95       	ret

00000796 <__fixunssfsi>:
 796:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_splitA>
 79a:	88 f0       	brcs	.+34     	; 0x7be <__fixunssfsi+0x28>
 79c:	9f 57       	subi	r25, 0x7F	; 127
 79e:	98 f0       	brcs	.+38     	; 0x7c6 <__fixunssfsi+0x30>
 7a0:	b9 2f       	mov	r27, r25
 7a2:	99 27       	eor	r25, r25
 7a4:	b7 51       	subi	r27, 0x17	; 23
 7a6:	b0 f0       	brcs	.+44     	; 0x7d4 <__fixunssfsi+0x3e>
 7a8:	e1 f0       	breq	.+56     	; 0x7e2 <__fixunssfsi+0x4c>
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	1a f0       	brmi	.+6      	; 0x7ba <__fixunssfsi+0x24>
 7b4:	ba 95       	dec	r27
 7b6:	c9 f7       	brne	.-14     	; 0x7aa <__fixunssfsi+0x14>
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <__fixunssfsi+0x4c>
 7ba:	b1 30       	cpi	r27, 0x01	; 1
 7bc:	91 f0       	breq	.+36     	; 0x7e2 <__fixunssfsi+0x4c>
 7be:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_zero>
 7c2:	b1 e0       	ldi	r27, 0x01	; 1
 7c4:	08 95       	ret
 7c6:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_zero>
 7ca:	67 2f       	mov	r22, r23
 7cc:	78 2f       	mov	r23, r24
 7ce:	88 27       	eor	r24, r24
 7d0:	b8 5f       	subi	r27, 0xF8	; 248
 7d2:	39 f0       	breq	.+14     	; 0x7e2 <__fixunssfsi+0x4c>
 7d4:	b9 3f       	cpi	r27, 0xF9	; 249
 7d6:	cc f3       	brlt	.-14     	; 0x7ca <__fixunssfsi+0x34>
 7d8:	86 95       	lsr	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b3 95       	inc	r27
 7e0:	d9 f7       	brne	.-10     	; 0x7d8 <__fixunssfsi+0x42>
 7e2:	3e f4       	brtc	.+14     	; 0x7f2 <__fixunssfsi+0x5c>
 7e4:	90 95       	com	r25
 7e6:	80 95       	com	r24
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__floatunsisf>:
 7f4:	e8 94       	clt
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <__floatsisf+0x12>

000007f8 <__floatsisf>:
 7f8:	97 fb       	bst	r25, 7
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__floatsisf+0x12>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	99 23       	and	r25, r25
 80c:	a9 f0       	breq	.+42     	; 0x838 <__floatsisf+0x40>
 80e:	f9 2f       	mov	r31, r25
 810:	96 e9       	ldi	r25, 0x96	; 150
 812:	bb 27       	eor	r27, r27
 814:	93 95       	inc	r25
 816:	f6 95       	lsr	r31
 818:	87 95       	ror	r24
 81a:	77 95       	ror	r23
 81c:	67 95       	ror	r22
 81e:	b7 95       	ror	r27
 820:	f1 11       	cpse	r31, r1
 822:	f8 cf       	rjmp	.-16     	; 0x814 <__floatsisf+0x1c>
 824:	fa f4       	brpl	.+62     	; 0x864 <__floatsisf+0x6c>
 826:	bb 0f       	add	r27, r27
 828:	11 f4       	brne	.+4      	; 0x82e <__floatsisf+0x36>
 82a:	60 ff       	sbrs	r22, 0
 82c:	1b c0       	rjmp	.+54     	; 0x864 <__floatsisf+0x6c>
 82e:	6f 5f       	subi	r22, 0xFF	; 255
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	16 c0       	rjmp	.+44     	; 0x864 <__floatsisf+0x6c>
 838:	88 23       	and	r24, r24
 83a:	11 f0       	breq	.+4      	; 0x840 <__floatsisf+0x48>
 83c:	96 e9       	ldi	r25, 0x96	; 150
 83e:	11 c0       	rjmp	.+34     	; 0x862 <__floatsisf+0x6a>
 840:	77 23       	and	r23, r23
 842:	21 f0       	breq	.+8      	; 0x84c <__floatsisf+0x54>
 844:	9e e8       	ldi	r25, 0x8E	; 142
 846:	87 2f       	mov	r24, r23
 848:	76 2f       	mov	r23, r22
 84a:	05 c0       	rjmp	.+10     	; 0x856 <__floatsisf+0x5e>
 84c:	66 23       	and	r22, r22
 84e:	71 f0       	breq	.+28     	; 0x86c <__floatsisf+0x74>
 850:	96 e8       	ldi	r25, 0x86	; 134
 852:	86 2f       	mov	r24, r22
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	2a f0       	brmi	.+10     	; 0x864 <__floatsisf+0x6c>
 85a:	9a 95       	dec	r25
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	da f7       	brpl	.-10     	; 0x85a <__floatsisf+0x62>
 864:	88 0f       	add	r24, r24
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__fp_inf>:
 86e:	97 f9       	bld	r25, 7
 870:	9f 67       	ori	r25, 0x7F	; 127
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	08 95       	ret

0000087a <__fp_nan>:
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	80 ec       	ldi	r24, 0xC0	; 192
 87e:	08 95       	ret

00000880 <__fp_powser>:
 880:	df 93       	push	r29
 882:	cf 93       	push	r28
 884:	1f 93       	push	r17
 886:	0f 93       	push	r16
 888:	ff 92       	push	r15
 88a:	ef 92       	push	r14
 88c:	df 92       	push	r13
 88e:	7b 01       	movw	r14, r22
 890:	8c 01       	movw	r16, r24
 892:	68 94       	set
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <__fp_powser+0x22>
 896:	da 2e       	mov	r13, r26
 898:	ef 01       	movw	r28, r30
 89a:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 89e:	fe 01       	movw	r30, r28
 8a0:	e8 94       	clt
 8a2:	a5 91       	lpm	r26, Z+
 8a4:	25 91       	lpm	r18, Z+
 8a6:	35 91       	lpm	r19, Z+
 8a8:	45 91       	lpm	r20, Z+
 8aa:	55 91       	lpm	r21, Z+
 8ac:	a6 f3       	brts	.-24     	; 0x896 <__fp_powser+0x16>
 8ae:	ef 01       	movw	r28, r30
 8b0:	0e 94 8b 02 	call	0x516	; 0x516 <__addsf3x>
 8b4:	fe 01       	movw	r30, r28
 8b6:	97 01       	movw	r18, r14
 8b8:	a8 01       	movw	r20, r16
 8ba:	da 94       	dec	r13
 8bc:	69 f7       	brne	.-38     	; 0x898 <__fp_powser+0x18>
 8be:	df 90       	pop	r13
 8c0:	ef 90       	pop	r14
 8c2:	ff 90       	pop	r15
 8c4:	0f 91       	pop	r16
 8c6:	1f 91       	pop	r17
 8c8:	cf 91       	pop	r28
 8ca:	df 91       	pop	r29
 8cc:	08 95       	ret

000008ce <__fp_pscA>:
 8ce:	00 24       	eor	r0, r0
 8d0:	0a 94       	dec	r0
 8d2:	16 16       	cp	r1, r22
 8d4:	17 06       	cpc	r1, r23
 8d6:	18 06       	cpc	r1, r24
 8d8:	09 06       	cpc	r0, r25
 8da:	08 95       	ret

000008dc <__fp_pscB>:
 8dc:	00 24       	eor	r0, r0
 8de:	0a 94       	dec	r0
 8e0:	12 16       	cp	r1, r18
 8e2:	13 06       	cpc	r1, r19
 8e4:	14 06       	cpc	r1, r20
 8e6:	05 06       	cpc	r0, r21
 8e8:	08 95       	ret

000008ea <__fp_round>:
 8ea:	09 2e       	mov	r0, r25
 8ec:	03 94       	inc	r0
 8ee:	00 0c       	add	r0, r0
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__fp_round+0xc>
 8f2:	88 23       	and	r24, r24
 8f4:	52 f0       	brmi	.+20     	; 0x90a <__stack+0xb>
 8f6:	bb 0f       	add	r27, r27
 8f8:	40 f4       	brcc	.+16     	; 0x90a <__stack+0xb>
 8fa:	bf 2b       	or	r27, r31
 8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
 8fe:	60 ff       	sbrs	r22, 0
 900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xb>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	08 95       	ret

0000090c <__fp_split3>:
 90c:	57 fd       	sbrc	r21, 7
 90e:	90 58       	subi	r25, 0x80	; 128
 910:	44 0f       	add	r20, r20
 912:	55 1f       	adc	r21, r21
 914:	59 f0       	breq	.+22     	; 0x92c <__fp_splitA+0x10>
 916:	5f 3f       	cpi	r21, 0xFF	; 255
 918:	71 f0       	breq	.+28     	; 0x936 <__fp_splitA+0x1a>
 91a:	47 95       	ror	r20

0000091c <__fp_splitA>:
 91c:	88 0f       	add	r24, r24
 91e:	97 fb       	bst	r25, 7
 920:	99 1f       	adc	r25, r25
 922:	61 f0       	breq	.+24     	; 0x93c <__fp_splitA+0x20>
 924:	9f 3f       	cpi	r25, 0xFF	; 255
 926:	79 f0       	breq	.+30     	; 0x946 <__fp_splitA+0x2a>
 928:	87 95       	ror	r24
 92a:	08 95       	ret
 92c:	12 16       	cp	r1, r18
 92e:	13 06       	cpc	r1, r19
 930:	14 06       	cpc	r1, r20
 932:	55 1f       	adc	r21, r21
 934:	f2 cf       	rjmp	.-28     	; 0x91a <__fp_split3+0xe>
 936:	46 95       	lsr	r20
 938:	f1 df       	rcall	.-30     	; 0x91c <__fp_splitA>
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__fp_splitA+0x30>
 93c:	16 16       	cp	r1, r22
 93e:	17 06       	cpc	r1, r23
 940:	18 06       	cpc	r1, r24
 942:	99 1f       	adc	r25, r25
 944:	f1 cf       	rjmp	.-30     	; 0x928 <__fp_splitA+0xc>
 946:	86 95       	lsr	r24
 948:	71 05       	cpc	r23, r1
 94a:	61 05       	cpc	r22, r1
 94c:	08 94       	sec
 94e:	08 95       	ret

00000950 <__fp_zero>:
 950:	e8 94       	clt

00000952 <__fp_szero>:
 952:	bb 27       	eor	r27, r27
 954:	66 27       	eor	r22, r22
 956:	77 27       	eor	r23, r23
 958:	cb 01       	movw	r24, r22
 95a:	97 f9       	bld	r25, 7
 95c:	08 95       	ret

0000095e <inverse>:
 95e:	9b 01       	movw	r18, r22
 960:	ac 01       	movw	r20, r24
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	80 e8       	ldi	r24, 0x80	; 128
 968:	9f e3       	ldi	r25, 0x3F	; 63
 96a:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__divsf3>

0000096e <__mulsf3>:
 96e:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 972:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
 976:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
 97a:	38 f0       	brcs	.+14     	; 0x98a <__mulsf3+0x1c>
 97c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
 980:	20 f0       	brcs	.+8      	; 0x98a <__mulsf3+0x1c>
 982:	95 23       	and	r25, r21
 984:	11 f0       	breq	.+4      	; 0x98a <__mulsf3+0x1c>
 986:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 98a:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_nan>
 98e:	11 24       	eor	r1, r1
 990:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_szero>

00000994 <__mulsf3x>:
 994:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_split3>
 998:	70 f3       	brcs	.-36     	; 0x976 <__mulsf3+0x8>

0000099a <__mulsf3_pse>:
 99a:	95 9f       	mul	r25, r21
 99c:	c1 f3       	breq	.-16     	; 0x98e <__mulsf3+0x20>
 99e:	95 0f       	add	r25, r21
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	55 1f       	adc	r21, r21
 9a4:	62 9f       	mul	r22, r18
 9a6:	f0 01       	movw	r30, r0
 9a8:	72 9f       	mul	r23, r18
 9aa:	bb 27       	eor	r27, r27
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	63 9f       	mul	r22, r19
 9b2:	aa 27       	eor	r26, r26
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	aa 1f       	adc	r26, r26
 9ba:	64 9f       	mul	r22, r20
 9bc:	66 27       	eor	r22, r22
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	66 1f       	adc	r22, r22
 9c4:	82 9f       	mul	r24, r18
 9c6:	22 27       	eor	r18, r18
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	73 9f       	mul	r23, r19
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	83 9f       	mul	r24, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	22 1f       	adc	r18, r18
 9de:	74 9f       	mul	r23, r20
 9e0:	33 27       	eor	r19, r19
 9e2:	a0 0d       	add	r26, r0
 9e4:	61 1d       	adc	r22, r1
 9e6:	23 1f       	adc	r18, r19
 9e8:	84 9f       	mul	r24, r20
 9ea:	60 0d       	add	r22, r0
 9ec:	21 1d       	adc	r18, r1
 9ee:	82 2f       	mov	r24, r18
 9f0:	76 2f       	mov	r23, r22
 9f2:	6a 2f       	mov	r22, r26
 9f4:	11 24       	eor	r1, r1
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	9a f0       	brmi	.+38     	; 0xa22 <__mulsf3_pse+0x88>
 9fc:	f1 f0       	breq	.+60     	; 0xa3a <__mulsf3_pse+0xa0>
 9fe:	88 23       	and	r24, r24
 a00:	4a f0       	brmi	.+18     	; 0xa14 <__mulsf3_pse+0x7a>
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	91 50       	subi	r25, 0x01	; 1
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__mulsf3_pse+0x64>
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	51 05       	cpc	r21, r1
 a18:	80 f0       	brcs	.+32     	; 0xa3a <__mulsf3_pse+0xa0>
 a1a:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_inf>
 a1e:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_szero>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	e4 f3       	brlt	.-8      	; 0xa1e <__mulsf3_pse+0x84>
 a26:	98 3e       	cpi	r25, 0xE8	; 232
 a28:	d4 f3       	brlt	.-12     	; 0xa1e <__mulsf3_pse+0x84>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b7 95       	ror	r27
 a32:	f7 95       	ror	r31
 a34:	e7 95       	ror	r30
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c1 f7       	brne	.-16     	; 0xa2a <__mulsf3_pse+0x90>
 a3a:	fe 2b       	or	r31, r30
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <square>:
 a48:	9b 01       	movw	r18, r22
 a4a:	ac 01       	movw	r20, r24
 a4c:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__mulsf3>

00000a50 <_exit>:
 a50:	f8 94       	cli

00000a52 <__stop_program>:
 a52:	ff cf       	rjmp	.-2      	; 0xa52 <__stop_program>
